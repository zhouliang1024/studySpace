<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuye.light.mbg.mapper.ItemskuMapper">
  <resultMap id="BaseResultMap" type="com.yuye.light.mbg.model.Itemsku">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="skuCode" jdbcType="VARCHAR" property="skucode" />
    <result column="itemId" jdbcType="BIGINT" property="itemid" />
    <result column="image" jdbcType="VARCHAR" property="image" />
    <result column="salePrice" jdbcType="BIGINT" property="saleprice" />
    <result column="recommendSalePrice" jdbcType="BIGINT" property="recommendsaleprice" />
    <result column="defaultSku" jdbcType="TINYINT" property="defaultsku" />
    <result column="weight" jdbcType="INTEGER" property="weight" />
    <result column="volume" jdbcType="INTEGER" property="volume" />
    <result column="extra" jdbcType="VARCHAR" property="extra" />
    <result column="isDeleted" jdbcType="TINYINT" property="isdeleted" />
    <result column="creatorId" jdbcType="BIGINT" property="creatorid" />
    <result column="modifierId" jdbcType="BIGINT" property="modifierid" />
    <result column="created" jdbcType="BIGINT" property="created" />
    <result column="updated" jdbcType="BIGINT" property="updated" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yuye.light.mbg.model.Itemsku">
    <result column="properties" jdbcType="LONGVARCHAR" property="properties" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, skuCode, itemId, image, salePrice, recommendSalePrice, defaultSku, weight, volume, 
    extra, isDeleted, creatorId, modifierId, created, updated
  </sql>
  <sql id="Blob_Column_List">
    properties
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yuye.light.mbg.model.ItemskuExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from itemsku
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yuye.light.mbg.model.ItemskuExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from itemsku
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from itemsku
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from itemsku
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.yuye.light.mbg.model.ItemskuExample">
    delete from itemsku
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yuye.light.mbg.model.Itemsku">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into itemsku (skuCode, itemId, image, 
      salePrice, recommendSalePrice, defaultSku, 
      weight, volume, extra, 
      isDeleted, creatorId, modifierId, 
      created, updated, properties
      )
    values (#{skucode,jdbcType=VARCHAR}, #{itemid,jdbcType=BIGINT}, #{image,jdbcType=VARCHAR}, 
      #{saleprice,jdbcType=BIGINT}, #{recommendsaleprice,jdbcType=BIGINT}, #{defaultsku,jdbcType=TINYINT}, 
      #{weight,jdbcType=INTEGER}, #{volume,jdbcType=INTEGER}, #{extra,jdbcType=VARCHAR}, 
      #{isdeleted,jdbcType=TINYINT}, #{creatorid,jdbcType=BIGINT}, #{modifierid,jdbcType=BIGINT}, 
      #{created,jdbcType=BIGINT}, #{updated,jdbcType=BIGINT}, #{properties,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yuye.light.mbg.model.Itemsku">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into itemsku
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="skucode != null">
        skuCode,
      </if>
      <if test="itemid != null">
        itemId,
      </if>
      <if test="image != null">
        image,
      </if>
      <if test="saleprice != null">
        salePrice,
      </if>
      <if test="recommendsaleprice != null">
        recommendSalePrice,
      </if>
      <if test="defaultsku != null">
        defaultSku,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="volume != null">
        volume,
      </if>
      <if test="extra != null">
        extra,
      </if>
      <if test="isdeleted != null">
        isDeleted,
      </if>
      <if test="creatorid != null">
        creatorId,
      </if>
      <if test="modifierid != null">
        modifierId,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="updated != null">
        updated,
      </if>
      <if test="properties != null">
        properties,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="skucode != null">
        #{skucode,jdbcType=VARCHAR},
      </if>
      <if test="itemid != null">
        #{itemid,jdbcType=BIGINT},
      </if>
      <if test="image != null">
        #{image,jdbcType=VARCHAR},
      </if>
      <if test="saleprice != null">
        #{saleprice,jdbcType=BIGINT},
      </if>
      <if test="recommendsaleprice != null">
        #{recommendsaleprice,jdbcType=BIGINT},
      </if>
      <if test="defaultsku != null">
        #{defaultsku,jdbcType=TINYINT},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=INTEGER},
      </if>
      <if test="volume != null">
        #{volume,jdbcType=INTEGER},
      </if>
      <if test="extra != null">
        #{extra,jdbcType=VARCHAR},
      </if>
      <if test="isdeleted != null">
        #{isdeleted,jdbcType=TINYINT},
      </if>
      <if test="creatorid != null">
        #{creatorid,jdbcType=BIGINT},
      </if>
      <if test="modifierid != null">
        #{modifierid,jdbcType=BIGINT},
      </if>
      <if test="created != null">
        #{created,jdbcType=BIGINT},
      </if>
      <if test="updated != null">
        #{updated,jdbcType=BIGINT},
      </if>
      <if test="properties != null">
        #{properties,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yuye.light.mbg.model.ItemskuExample" resultType="java.lang.Integer">
    select count(*) from itemsku
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update itemsku
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.skucode != null">
        skuCode = #{record.skucode,jdbcType=VARCHAR},
      </if>
      <if test="record.itemid != null">
        itemId = #{record.itemid,jdbcType=BIGINT},
      </if>
      <if test="record.image != null">
        image = #{record.image,jdbcType=VARCHAR},
      </if>
      <if test="record.saleprice != null">
        salePrice = #{record.saleprice,jdbcType=BIGINT},
      </if>
      <if test="record.recommendsaleprice != null">
        recommendSalePrice = #{record.recommendsaleprice,jdbcType=BIGINT},
      </if>
      <if test="record.defaultsku != null">
        defaultSku = #{record.defaultsku,jdbcType=TINYINT},
      </if>
      <if test="record.weight != null">
        weight = #{record.weight,jdbcType=INTEGER},
      </if>
      <if test="record.volume != null">
        volume = #{record.volume,jdbcType=INTEGER},
      </if>
      <if test="record.extra != null">
        extra = #{record.extra,jdbcType=VARCHAR},
      </if>
      <if test="record.isdeleted != null">
        isDeleted = #{record.isdeleted,jdbcType=TINYINT},
      </if>
      <if test="record.creatorid != null">
        creatorId = #{record.creatorid,jdbcType=BIGINT},
      </if>
      <if test="record.modifierid != null">
        modifierId = #{record.modifierid,jdbcType=BIGINT},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=BIGINT},
      </if>
      <if test="record.updated != null">
        updated = #{record.updated,jdbcType=BIGINT},
      </if>
      <if test="record.properties != null">
        properties = #{record.properties,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update itemsku
    set id = #{record.id,jdbcType=BIGINT},
      skuCode = #{record.skucode,jdbcType=VARCHAR},
      itemId = #{record.itemid,jdbcType=BIGINT},
      image = #{record.image,jdbcType=VARCHAR},
      salePrice = #{record.saleprice,jdbcType=BIGINT},
      recommendSalePrice = #{record.recommendsaleprice,jdbcType=BIGINT},
      defaultSku = #{record.defaultsku,jdbcType=TINYINT},
      weight = #{record.weight,jdbcType=INTEGER},
      volume = #{record.volume,jdbcType=INTEGER},
      extra = #{record.extra,jdbcType=VARCHAR},
      isDeleted = #{record.isdeleted,jdbcType=TINYINT},
      creatorId = #{record.creatorid,jdbcType=BIGINT},
      modifierId = #{record.modifierid,jdbcType=BIGINT},
      created = #{record.created,jdbcType=BIGINT},
      updated = #{record.updated,jdbcType=BIGINT},
      properties = #{record.properties,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update itemsku
    set id = #{record.id,jdbcType=BIGINT},
      skuCode = #{record.skucode,jdbcType=VARCHAR},
      itemId = #{record.itemid,jdbcType=BIGINT},
      image = #{record.image,jdbcType=VARCHAR},
      salePrice = #{record.saleprice,jdbcType=BIGINT},
      recommendSalePrice = #{record.recommendsaleprice,jdbcType=BIGINT},
      defaultSku = #{record.defaultsku,jdbcType=TINYINT},
      weight = #{record.weight,jdbcType=INTEGER},
      volume = #{record.volume,jdbcType=INTEGER},
      extra = #{record.extra,jdbcType=VARCHAR},
      isDeleted = #{record.isdeleted,jdbcType=TINYINT},
      creatorId = #{record.creatorid,jdbcType=BIGINT},
      modifierId = #{record.modifierid,jdbcType=BIGINT},
      created = #{record.created,jdbcType=BIGINT},
      updated = #{record.updated,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yuye.light.mbg.model.Itemsku">
    update itemsku
    <set>
      <if test="skucode != null">
        skuCode = #{skucode,jdbcType=VARCHAR},
      </if>
      <if test="itemid != null">
        itemId = #{itemid,jdbcType=BIGINT},
      </if>
      <if test="image != null">
        image = #{image,jdbcType=VARCHAR},
      </if>
      <if test="saleprice != null">
        salePrice = #{saleprice,jdbcType=BIGINT},
      </if>
      <if test="recommendsaleprice != null">
        recommendSalePrice = #{recommendsaleprice,jdbcType=BIGINT},
      </if>
      <if test="defaultsku != null">
        defaultSku = #{defaultsku,jdbcType=TINYINT},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=INTEGER},
      </if>
      <if test="volume != null">
        volume = #{volume,jdbcType=INTEGER},
      </if>
      <if test="extra != null">
        extra = #{extra,jdbcType=VARCHAR},
      </if>
      <if test="isdeleted != null">
        isDeleted = #{isdeleted,jdbcType=TINYINT},
      </if>
      <if test="creatorid != null">
        creatorId = #{creatorid,jdbcType=BIGINT},
      </if>
      <if test="modifierid != null">
        modifierId = #{modifierid,jdbcType=BIGINT},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=BIGINT},
      </if>
      <if test="updated != null">
        updated = #{updated,jdbcType=BIGINT},
      </if>
      <if test="properties != null">
        properties = #{properties,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yuye.light.mbg.model.Itemsku">
    update itemsku
    set skuCode = #{skucode,jdbcType=VARCHAR},
      itemId = #{itemid,jdbcType=BIGINT},
      image = #{image,jdbcType=VARCHAR},
      salePrice = #{saleprice,jdbcType=BIGINT},
      recommendSalePrice = #{recommendsaleprice,jdbcType=BIGINT},
      defaultSku = #{defaultsku,jdbcType=TINYINT},
      weight = #{weight,jdbcType=INTEGER},
      volume = #{volume,jdbcType=INTEGER},
      extra = #{extra,jdbcType=VARCHAR},
      isDeleted = #{isdeleted,jdbcType=TINYINT},
      creatorId = #{creatorid,jdbcType=BIGINT},
      modifierId = #{modifierid,jdbcType=BIGINT},
      created = #{created,jdbcType=BIGINT},
      updated = #{updated,jdbcType=BIGINT},
      properties = #{properties,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yuye.light.mbg.model.Itemsku">
    update itemsku
    set skuCode = #{skucode,jdbcType=VARCHAR},
      itemId = #{itemid,jdbcType=BIGINT},
      image = #{image,jdbcType=VARCHAR},
      salePrice = #{saleprice,jdbcType=BIGINT},
      recommendSalePrice = #{recommendsaleprice,jdbcType=BIGINT},
      defaultSku = #{defaultsku,jdbcType=TINYINT},
      weight = #{weight,jdbcType=INTEGER},
      volume = #{volume,jdbcType=INTEGER},
      extra = #{extra,jdbcType=VARCHAR},
      isDeleted = #{isdeleted,jdbcType=TINYINT},
      creatorId = #{creatorid,jdbcType=BIGINT},
      modifierId = #{modifierid,jdbcType=BIGINT},
      created = #{created,jdbcType=BIGINT},
      updated = #{updated,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>